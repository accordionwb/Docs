function [Summary,Input,Target]=fun_data_sel_2D(phast,parameter,filter)
%%
% Status: True

% The function deals with 2-dimensional data distribution to select appropriate neural network training data. The
% layout of four gas detectors was diamond with fixed included angle of 60 degrees.

% Input parameters includes Data, Order, Direction, Source, Downwind, Gap, Upbond, Lowbond, filename
%       Data[n,4]: Input parameters which are generated by DNV Phast
%       order[2,m]: data filed in the data file, generated by specific matlab code
%       direction[k]: included angle between wind-direction and center line of diamond-like gas detectors
%               default [-20:2:20] degree
%       Source_distance[i]: the distance from the source to the first gas detector
%               default 50m
%       downwind[j]: villages in the downwind direction from the first gas detector
%               default[200,300,400,500,600] m
%       gap: fixed space between neighbouring gas detectors
%               default 30 m
%       upbond: the maximum distance from the source for distance sequence generation
%               default 1000m
%       lowbond: the minimum distance from the source point for distance sequence generation
%               default 50m
%           * the distance sequence generation is a base of all data selection, default distance interval is 0.5 m
%       filename: name of output file which stores Input and Target
%       sangle: specific included angle between first and 2/3 gas detectors

%% Defination of Input parameters
if (nargin == 1)
    parameter.direction=-20:2:20;
    parameter.Source_distance=50;  % changeable value
    parameter.downwindx=[200,300,400,500,600];  % changeable value
      parameter.downwindy=[0 0 0 0 0];
    parameter.gap=30;  % fixed value
    parameter.lowbond=10;   % fixed value
    parameter.sangle=pi/4;  % fixed value
    parameter.filename='NN_input';
    filter.pressure=0;  % bar  unused
    filter.wind=0;  % windspeed
elseif (nargin == 2)
    filter.pressure=0; % bar; unused
    filter.wind=0;
    filter.stability='all';
    filter.predict=boolean(false);
    filter1.category='train';
elseif (nargin<1)
    error('Input insufficient, At least two parameters')
end

%% Initialization
direction=parameter.direction;
Source_distance=parameter.Source_distance;
D0=Source_distance;
downwindx=parameter.downwindx;
downwindy=parameter.downwindy;
d_angle=atan(downwindy/downwindx);
downwind=sqrt(downwindx.^2+downwindy.^2);
gap=parameter.gap;  % fixed value
upbond=max(downwind)+max([50,max(downwind)*1.01]); %
lowbond=parameter.lowbond;   % fixed value
sangle=parameter.sangle;   % fixed angle between sensors
filename=parameter.filename;

stability=filter.stability;
pressure=filter.pressure;  % bar  unused
wind=filter.wind;  % windspeed
predict=filter.predict; % if predict, when true, skip cases that couldn't cover the downwind distance

%% Data Process and selection
n=1; % active case number is initialized
nt=1; % number for judging detector is initialized
mk=1; % message loop number
Num_of_stability=length(phast);
max_downwind=max(downwind);
all_pressure=boolean(false);
all_stability=boolean(false);
%%
for A=1:Num_of_stability
    % -------------------- Filter of atmospheric stability -------------------------- % 1: stability
    if (strcmp(stability,'all') || strcmp(stability,'All') )
        if (~all_stability)
            disp('Using all stability category')
        end
        all_stability=boolean(true);
    else
        if (char(phast(A).stability) == stability)
            disp(['Using stability ',stability])
            all_stability=boolean(false);
        else
            all_stability=boolean(false);
            disp(['skip stability of ',char(phast(A).stability)])
            continue
        end
    end
    % -------------------- Filter of data category: train or tesst ------------------------------
    if(strcmp('train',filter.category))
        Data=phast(A).train;
        Order=phast(A).order;
    elseif(strcmp('test',filter.category))
        Data=phast(A).test;
        Order=phast(A).t_order;
    else
        disp('Wrong category of output')
    end
    %% Part of data processing
    Num_of_Order=length(Order);
    Num_of_downwind=length(downwind);
    Num_of_direction=length(direction);
    message=cell([2,1]);  % Initial of message
    index0=find(Data(:,1)==0);
    cols=length(Order);
    
    if (length(index0)==cols+1)
        disp('The program is using data 1 format (single "0" as the start mark)')
        index=index0;
    elseif (length(index0)==2*cols+1)
        for ii=1:cols+1
            index(ii)=index0(2*ii-1);
        end
    else
        message_data=['Initial Data error,length(index0)=',num2str(length(index0)),'; length(Order)=',num2str(length(Order)),',Please check again!'];
        error(message_data)
    end
    
    %%       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    for k=1:Num_of_Order        % Loop Order case of Phast number is k
        Distance=Data(index(k):index(k+1)-1,1)';
        Concentration=Data(index(k):index(k+1)-1,2)';
        width=Data(index(k):index(k+1)-1,3)';
        Times=Data(index(k):index(k+1)-1,4)';
        
        %----------------------- Data Selection Judgeing Pressure ------------------------%  2 : Pressure
        
        if (pressure == 0)
            if (~all_pressure)
                disp('Using all pressure category')
            end
            all_pressure=boolean(true);
        else
            if(pressure ~=Order(1,k))
                all_pressure=boolean(false);
                disp(['Skip selecting data of pressure ',num2str(Order(1,k)),'bar'])
                message{mk}=['Skip selecting data of pressure ',num2str(Order(1,k)),'bar'];
                mk=mk+1;
                continue
            else
                all_pressure=boolean(false);
                disp(['Use data of pressure ',num2str(Order(1,k)),'bar'])
                message{mk}=['Use data of pressure ',num2str(Order(1,k)),'bar'];
                mk=mk+1;
            end
        end
        
        % -------------- Selection of wind based on Order category ----------% 3: Wind speed lowbond
        
        if (wind~=0 && wind >= Order(3,k))  % wind=wind_speed
            disp(['Skip order of wind speed',num2str(wind),'m/s'])
            message{mk}=['Skip order of wind speed',num2str(wind),'(m/s) at case number of ',num2str(k)];
            mk=mk+1;
            continue
        end
        
        %------------ Judging whether the boolean "Preditiction" would work -----%       % 4: Is Predition?
        L=max(Distance);   % Max distance of
        if (L < max_downwind && predict)
            disp(['skip case number ',num2str(k),' because maximum plume distance is smaller than prediction target'])
            message{mk}=['skip case number ',num2str(k),' for maximum plume distance is smaller than prediction target'];
            mk=mk+1;
            continue
        end
        
        % ----------------Evaluation of interp x based on distance category -----------
        starts=find((Distance<=lowbond & Distance>0),1,'last');
        if (L<=upbond)
            ends=find((Distance<=L & Distance>lowbond),1,'last');
            x=[Distance(starts),lowbond:0.5:floor(Distance(ends)),Distance(ends)];
        else
            ends=find(Distance>=upbond,1,'first');
            x=[Distance(starts),lowbond:0.5:round(Distance(ends))];
        end
        
        % ----------------------  Data intergrate --------------------------------
        x0=Distance(starts:ends);
        c0=Concentration(starts:ends);
        t0=Times(starts:ends);
        w0=width(starts:ends);
        w0_ends=find(w0>0,1,'last');
        c=spline(x0,c0,x);
        t=spline(x0,t0,x);
        w=spline(x0,w0,x);  % half width of plume
        angle_smoke=atan(w./x);  % Unit in rad
        
        % Part of Input angel calculation
        angle_sensor1=0;    % Unit is rad  !!!!!!!!!
        angle_sensor2=atan(gap*sin(sangle)/(gap*cos(sangle)+D0));
        angle_sensor3=0;
        angle_sensor4=-atan(gap*sin(sangle)/(gap*cos(sangle)+D0));
        %%            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        for s=1:Num_of_direction      % Wind Direction is s
            angle_wind=deg2rad(direction(s));  % Rad angle of wind
            angle_sen_wind(1)=abs(angle_wind-angle_sensor1);  % included angel of wind and sensor
            angle_sen_wind(2)=abs(angle_wind-angle_sensor2);
            angle_sen_wind(3)=abs(angle_wind-angle_sensor3);
            angle_sen_wind(4)=abs(angle_wind-angle_sensor4);
            
            %----------------------------------------------------------------------------------------------------------------%
            sen_wind_pro(1)=D0/cos(angle_sensor1)*cos(angle_sen_wind(1));                  % Projection on wind direction
            sen_wind_pro(2)=(D0+gap*cos(sangle))/cos(angle_sensor2)*cos(angle_sen_wind(2));                                  %
            sen_wind_pro(3)=(D0+2*gap*cos(sangle))/cos(angle_sensor3)*cos(angle_sen_wind(3));                                %
            sen_wind_pro(4)=(D0+gap*cos(sangle))/cos(angle_sensor4)*cos(angle_sen_wind(4));                                  %
            %----------------------------------------------------------------------------------------------------------------%
            
            % Condition classification part: Judging whether three sensors could gain record
            acting_num=[0 0 0 0];
            
            %-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%
            
            if (angle_wind>0)  %% First condition, wind_angle >0
                inx1=find(x>=sen_wind_pro(1),1,'first');
                inx2=find(x>=sen_wind_pro(2),1,'first');
                inx3=find(x>=sen_wind_pro(3),1,'first');
                inx4=find(x>=sen_wind_pro(4),1,'first');
                
                if (angle_sen_wind(1)<angle_smoke(inx1))
                    X(1)=c(inx1);T0=t(inx1);
                    acting_num(1)=true;
                else
                    X(1)=0.01; T0=t(inx1);   %first Sensor
                end
                
                if (angle_sen_wind(2)< angle_smoke(inx2))
                    X(2)=t(inx2)-T0;X(3)=c(inx2); % Second Sensor
                    acting_num(2)=true;
                else
                    X(2)=7200;X(3)=0.01; % Second Sensor
                end
                
                if (angle_sen_wind(3)< angle_smoke(inx3))
                    X(4)=t(inx3)-T0;X(5)=c(inx3); % Third Sensor
                    acting_num(3)=true;
                else
                    X(4)=7200;X(5)=0.01; % Third Sensor
                end
                
                if (angle_sen_wind(4)< angle_smoke(inx4))
                    X(6)=t(inx4)-T0;X(7)=c(inx4); % Forth Sensor
                    acting_num(4)=true;
                else
                    X(6)=7200;X(7)=0.01; % Forth Sensor
                end
                %------------------------------------------------------------------
                
                
                Xo(1)=X(1); % 1st con
                Xo(2)=X(2); % 2rd time
                Xo(3)=X(3); % 2rd con
                Xo(4)=X(4); % 3th time
                Xo(5)=X(5); % 3th con
                
                %-------------------------------------------------------------------------------------%
            elseif (angle_wind<0)   %% Condition 2, Wind angle <0
                
                inx1=find(x>=sen_wind_pro(1),1,'first');
                inx2=find(x>=sen_wind_pro(2),1,'first');
                inx3=find(x>=sen_wind_pro(3),1,'first');
                inx4=find(x>=sen_wind_pro(4),1,'first');
                if (angle_sen_wind(1)<angle_smoke(inx1))
                    X(1)=c(inx1);T0=t(inx1);
                    acting_num(1)=true;
                else
                    X(1)=0.01; T0=t(inx1);   %first Sensor
                end
                if (angle_sen_wind(2)< angle_smoke(inx2))
                    X(2)=t(inx2)-T0;X(3)=c(inx2); % Second Sensor
                    acting_num(2)=true;
                else
                    X(2)=7200;X(3)=0.01; % Second Sensor
                end
                if (angle_sen_wind(3)< angle_smoke(inx3))
                    X(4)=t(inx3)-T0;X(5)=c(inx3); % Third Sensor
                    acting_num(3)=true;
                else
                    X(4)=7200;X(5)=0.01; % Third Sensor
                end
                if (angle_sen_wind(4)< angle_smoke(inx4))
                    X(6)=t(inx4)-T0;X(7)=c(inx4); % Forth Sensor
                    acting_num(4)=true;
                else
                    X(6)=7200;X(7)=0.01; % Forth Sensor
                end
                
                %%%%%%%%%%%%%% Judeing of pressure category %%%%%%%%%%%%%%%
                
                Xo(1)=X(1); % first
                Xo(2)=X(6); % forth
                Xo(3)=X(7); % forth
                Xo(4)=X(4); % third
                Xo(5)=X(5); % thifd
                
                %----------------------------------------------------------------------------------%
            else   % wind_angle =0
                inx1=find(x>=sen_wind_pro(1),1,'first');
                inx2=find(x>=sen_wind_pro(2),1,'first');
                inx3=find(x>=sen_wind_pro(3),1,'first');
                inx4=find(x>=sen_wind_pro(4),1,'first');
                if (angle_sen_wind(1)<angle_smoke(inx1))
                    X(1)=c(inx1);T0=t(inx1);
                    acting_num(1)=true;
                else
                    X(1)=0.01; T0=t(inx1);   %first Sensor
                end
                if (angle_sen_wind(2)< angle_smoke(inx2))
                    X(2)=t(inx2)-T0;X(3)=c(inx2); % Second Sensor
                    acting_num(2)=true;
                else
                    X(2)=7200;X(3)=0.01; % Second Sensor
                end
                if (angle_sen_wind(3)< angle_smoke(inx3))
                    X(4)=t(inx3)-T0;X(5)=c(inx3); % Third Sensor
                    acting_num(3)=true;
                else
                    X(4)=7200;X(5)=0.01; % Third Sensor
                end
                if (angle_sen_wind(4)< angle_smoke(inx4))
                    X(6)=t(inx4)-T0;X(7)=c(inx4); % Forth Sensor
                    acting_num(4)=true;
                else
                    X(6)=7200;X(7)=0.01; % Forth Sensor
                end
                %------------------------------------------------------------------
                %%%%%%%%%%%%%% Judeing of Pressure %%%%%%%%%%%%%%
                
                Xo(1)=X(1); % first
                Xo(2)=X(2); % second
                Xo(3)=X(3); % second
                Xo(4)=X(4); % third
                Xo(5)=X(5); % third
                
            end   % Done
            
            %-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%
            %% Nargout
            if (nargout == 1)
                % ----------------- Case Information ----------------
                info(nt).stability=phast(A).stability;
                info(nt).pressure=Order(1,k);
                info(nt).hole_size=Order(2,k);
                info(nt).wind_speed=Order(3,k);
                info(nt).direction=direction(s);
                info(nt).max_plume=L;
                
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                % ----------------- Filter of detectors ---------------------------  %  5: detectors
                if (sum(acting_num)< 3)
                    message{mk}=['Acting detectors num is: ',num2str(sum(acting_num)),' Skip direction ',num2str(direction(s)),', the loop will continue'];
                    info(nt).is_detect_work=boolean(false);
                    info(nt).detect_work_num=sum(acting_num);
                    nt=nt+1;
                    mk=mk+1;
                    continue
                else
                    info(nt).is_detect_work=boolean(true);
                    info(nt).detect_work_num=sum(acting_num);
                end
                nt=nt+1;
                continue  % skip the following for loop of downwind
                  %%              %-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%
            else  % other output parameters exist
                for m=1:Num_of_downwind      % downwind loop number is m
                    x10=downwind(m);
                    info(nt).stability=phast(A).stability;
                    info(nt).pressure=Order(1,k);
                    info(nt).hole_size=Order(2,k);
                    info(nt).wind_speed=Order(3,k);
                    info(nt).direction=direction(s);
                    info(nt).max_plume=L;
                    info(nt).downwind=x10;

                    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                    % ----------------- Filter of detectors ---------------------------  %  5: detectors
                    if (sum(acting_num)< 3)
                        %                         disp('Not enough detectors have recorded toxic gas concentration, the loop will continue')
                        message{mk}=['Acting detectors num is: ',num2str(sum(acting_num)),' Skip direction ',num2str(direction(s)),', the loop will continue'];
                        info(nt).is_detect_work=boolean(false);
                        info(nt).detect_work_num=sum(acting_num);
                        nt=nt+1;
                        mk=mk+1;
                        continue
                    else
                        info(nt).is_detect_work=boolean(true);
                        info(nt).detect_work_num=sum(acting_num);
                    end
                     % ----------------- Filter of detectors ---------------------------  %  5: detectors
                     if (x10> x0(w0_ends))
                         message{mk}=['Plume half width at ',num2str(x0(w0_ends)),' = 0, skip the case'];
                         mk=mk+1;
                         info(nt).is_plume_exist=boolean(false);
                         nt=nt+1;
                         continue
                     else
                         info(nt).is_plume_exist=boolean(true);
                     end
                                    
                     
                     
                    %%             %%%---%%%---%%%---%%%- automatic filter of downwind(m) -%%%---%%%---%%%---%%%
                    
                    if (L>=downwind(m))
                        % ------------ Input parameter --------------------
                        Xo(6)= Order(3,k);  % wind speed
                        Xo(7)=direction(s);
                        Xo(8)=downwind(m);
                        % determination of whether use single value for nerual network input
                        if (all_stability && all_pressure)
                            Xo(9)=A;   % Index number of stability   (stability
                            Xo(10)=Order(1,k);   % Pressure
                        elseif (all_pressure)
                            Xo(9)=Order(1,k);   % Pressure
                        elseif(all_stability)
                            Xo(9)=A;   % Index number of stability   (stability
                        end
                        
                        
                        % ----------------- Part of Target ---------------------------------------%
                        
                        iny1= find(x>=x10*cos(angle_wind-d_angle),1,'first');
                        Y(1)=c(iny1);    % The first is concentration
                        Y(2)=t(iny1)-T0;    % the second is time
                        Y(3)=w(iny1);   % plume half width
                        Y(4)=x(iny1)*sin(abs(angle_wind));  % Target position width
                        
                        
                        info(nt).plume_half=w(iny1);
                        info(nt).width_ratio=Y(4)/Y(3);% Ratio is target-width / plume half-width  (works on condition that ratio<1)
                        if (info(nt).width_ratio<=1)
                            info(nt).is_impacted=boolean(true);
                        else
                            info(nt).is_impacted=boolean(false);
                        end
                        input_info(n)=info(nt);

                        nt=nt+1; % total cases number that after initial selection
                    else
                        continue
                    end
                    %---------------- transfer value  ------------------------%
                      % Total actual Case Number at final output
                    Input(:,n)=Xo';
                    Target(:,n)=Y';
                     n=n+1; 
                    
                end  % end loop of downwind (for m )
            end  % end loop of nargout (if loop)
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        end   % end loop of downwind distance  (for s)
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    end  % End loop of phast case number from Order (for k)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end  % endo of stability (for A)

Summary.case_info=info;
Summary.message=message;
%% Part of summmary of data selection
% ---------- Summary of sensor -----------------
for s=1:length(direction)
    m=1;
    n=1;
    detect_num_cont=[];
    for i=1:length(info)
        if (info(i).direction == direction(s))
            detect_num_cont(m)=info(i).is_detect_work;
            if (info(i).is_detect_work)
                work_index(n)=i;
                n=n+1;
            end
            m=m+1;  % num of sensor worked
        end
    end
    num_of_det_work=sum(detect_num_cont);
    Summary.sensor(s).wind_direction=direction(s);
    Summary.sensor(s).work_case=num_of_det_work;
    Summary.sensor(s).case_count=length(detect_num_cont);
    Summary.sensor(s).work_ratio=num_of_det_work/length(detect_num_cont)*100;  % in percentage
    Summary.sensor(s).case_index=work_index;
    clear work_index
end
% ---------- Summary of cases impact -----------------
if (nargout>1)
    Summary.input_info=input_info;
    impact_count=[];
    impact_index=[];
    m=1;
    for k=1:length(input_info)
        if (input_info(k).is_impacted)
            impact_index(m)=k;
            impact_count(m)=input_info(k).is_impacted;
            m=m+1;
        end
    end
    Summary.impact.count=sum(impact_count);
    Summary.impact.index=impact_index;
    Summary.impact.impact_ratio=sum(impact_count)/length(info);
end


